{"ast":null,"code":"import{Direction}from\"./web/constants\";import FlingGestureHandler from\"./web/FlingGestureHandler\";import LongPressGestureHandler from\"./web/LongPressGestureHandler\";import NativeViewGestureHandler from\"./web/NativeViewGestureHandler\";import*as NodeManager from\"./web/NodeManager\";import PanGestureHandler from\"./web/PanGestureHandler\";import PinchGestureHandler from\"./web/PinchGestureHandler\";import RotationGestureHandler from\"./web/RotationGestureHandler\";import TapGestureHandler from\"./web/TapGestureHandler\";var Gestures={PanGestureHandler:PanGestureHandler,RotationGestureHandler:RotationGestureHandler,PinchGestureHandler:PinchGestureHandler,TapGestureHandler:TapGestureHandler,NativeViewGestureHandler:NativeViewGestureHandler,LongPressGestureHandler:LongPressGestureHandler,FlingGestureHandler:FlingGestureHandler};export default{Direction:Direction,handleSetJSResponder:function handleSetJSResponder(tag,blockNativeResponder){console.warn('handleSetJSResponder: ',tag,blockNativeResponder);},handleClearJSResponder:function handleClearJSResponder(){console.warn('handleClearJSResponder: ');},createGestureHandler:function createGestureHandler(handlerName,handlerTag,config){if(!(handlerName in Gestures))throw new Error(\"react-native-gesture-handler: \"+handlerName+\" is not supported on web.\");var GestureClass=Gestures[handlerName];NodeManager.createGestureHandler(handlerTag,new GestureClass());this.updateGestureHandler(handlerTag,config);},attachGestureHandler:function attachGestureHandler(handlerTag,newView,propsRef){NodeManager.getHandler(handlerTag).setView(newView,propsRef);},updateGestureHandler:function updateGestureHandler(handlerTag,newConfig){NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);},getGestureHandlerNode:function getGestureHandlerNode(handlerTag){return NodeManager.getHandler(handlerTag);},dropGestureHandler:function dropGestureHandler(handlerTag){NodeManager.dropGestureHandler(handlerTag);}};","map":{"version":3,"sources":["/Users/evanepperson/projectFolder/eppApp/node_modules/react-native-gesture-handler/RNGestureHandlerModule.web.js"],"names":["Direction","FlingGestureHandler","LongPressGestureHandler","NativeViewGestureHandler","NodeManager","PanGestureHandler","PinchGestureHandler","RotationGestureHandler","TapGestureHandler","Gestures","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","Error","GestureClass","updateGestureHandler","attachGestureHandler","newView","propsRef","getHandler","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler"],"mappings":"AAAA,OAASA,SAAT,uBACA,MAAOC,CAAAA,mBAAP,iCACA,MAAOC,CAAAA,uBAAP,qCACA,MAAOC,CAAAA,wBAAP,sCACA,MAAO,GAAKC,CAAAA,WAAZ,yBACA,MAAOC,CAAAA,iBAAP,+BACA,MAAOC,CAAAA,mBAAP,iCACA,MAAOC,CAAAA,sBAAP,oCACA,MAAOC,CAAAA,iBAAP,+BAEA,GAAMC,CAAAA,QAAQ,CAAG,CACfJ,iBAAiB,CAAjBA,iBADe,CAEfE,sBAAsB,CAAtBA,sBAFe,CAGfD,mBAAmB,CAAnBA,mBAHe,CAIfE,iBAAiB,CAAjBA,iBAJe,CAKfL,wBAAwB,CAAxBA,wBALe,CAMfD,uBAAuB,CAAvBA,uBANe,CAOfD,mBAAmB,CAAnBA,mBAPe,CAAjB,CAWA,cAAe,CACbD,SAAS,CAATA,SADa,CAEbU,oBAFa,+BAEQC,GAFR,CAEaC,oBAFb,CAEmC,CAC9CC,OAAO,CAACC,IAAR,CAAa,wBAAb,CAAuCH,GAAvC,CAA4CC,oBAA5C,EACD,CAJY,CAKbG,sBALa,kCAKY,CACvBF,OAAO,CAACC,IAAR,CAAa,0BAAb,EACD,CAPY,CAQbE,oBARa,+BAQQC,WARR,CAQqBC,UARrB,CAQiCC,MARjC,CAQyC,CACpD,GAAI,EAAEF,WAAW,GAAIR,CAAAA,QAAjB,CAAJ,CACE,KAAM,IAAIW,CAAAA,KAAJ,kCAC6BH,WAD7B,6BAAN,CAGF,GAAMI,CAAAA,YAAY,CAAGZ,QAAQ,CAACQ,WAAD,CAA7B,CACAb,WAAW,CAACY,oBAAZ,CAAiCE,UAAjC,CAA6C,GAAIG,CAAAA,YAAJ,EAA7C,EACA,KAAKC,oBAAL,CAA0BJ,UAA1B,CAAsCC,MAAtC,EACD,CAhBY,CAiBbI,oBAjBa,+BAiBQL,UAjBR,CAiBoBM,OAjBpB,CAiB6BC,QAjB7B,CAiBuC,CAClDrB,WAAW,CAACsB,UAAZ,CAAuBR,UAAvB,EAAmCS,OAAnC,CAA2CH,OAA3C,CAAoDC,QAApD,EACD,CAnBY,CAoBbH,oBApBa,+BAoBQJ,UApBR,CAoBoBU,SApBpB,CAoB+B,CAC1CxB,WAAW,CAACsB,UAAZ,CAAuBR,UAAvB,EAAmCW,mBAAnC,CAAuDD,SAAvD,EACD,CAtBY,CAuBbE,qBAvBa,gCAuBSZ,UAvBT,CAuBqB,CAChC,MAAOd,CAAAA,WAAW,CAACsB,UAAZ,CAAuBR,UAAvB,CAAP,CACD,CAzBY,CA0Bba,kBA1Ba,6BA0BMb,UA1BN,CA0BkB,CAC7Bd,WAAW,CAAC2B,kBAAZ,CAA+Bb,UAA/B,EACD,CA5BY,CAAf","sourcesContent":["import { Direction } from './web/constants';\nimport FlingGestureHandler from './web/FlingGestureHandler';\nimport LongPressGestureHandler from './web/LongPressGestureHandler';\nimport NativeViewGestureHandler from './web/NativeViewGestureHandler';\nimport * as NodeManager from './web/NodeManager';\nimport PanGestureHandler from './web/PanGestureHandler';\nimport PinchGestureHandler from './web/PinchGestureHandler';\nimport RotationGestureHandler from './web/RotationGestureHandler';\nimport TapGestureHandler from './web/TapGestureHandler';\n\nconst Gestures = {\n  PanGestureHandler,\n  RotationGestureHandler,\n  PinchGestureHandler,\n  TapGestureHandler,\n  NativeViewGestureHandler,\n  LongPressGestureHandler,\n  FlingGestureHandler,\n  // ForceTouchGestureHandler,\n};\n\nexport default {\n  Direction,\n  handleSetJSResponder(tag, blockNativeResponder) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler(handlerName, handlerTag, config) {\n    if (!(handlerName in Gestures))\n      throw new Error(\n        `react-native-gesture-handler: ${handlerName} is not supported on web.`\n      );\n    const GestureClass = Gestures[handlerName];\n    NodeManager.createGestureHandler(handlerTag, new GestureClass());\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler(handlerTag, newView, propsRef) {\n    NodeManager.getHandler(handlerTag).setView(newView, propsRef);\n  },\n  updateGestureHandler(handlerTag, newConfig) {\n    NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n  },\n  getGestureHandlerNode(handlerTag) {\n    return NodeManager.getHandler(handlerTag);\n  },\n  dropGestureHandler(handlerTag) {\n    NodeManager.dropGestureHandler(handlerTag);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}