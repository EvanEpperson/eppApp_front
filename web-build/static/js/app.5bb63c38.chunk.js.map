{"version":3,"sources":["ChatBox.js","firebase.js","screens/LoginScreen.js","screens/TestingImages.js","screens/RegisterScreen.js","components/CustomListItem.js","screens/HomeScreen.js","screens/AddChatScreen.js","screens/ChatScreen.js","App.js"],"names":["props","state","View","style","styles","chat","Text","Component","StyleSheet","create","display","flexDirection","borderColor","borderWidth","fontSize","db","firebase","length","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","LoginScreen","navigation","useState","email","setEmail","password","setPassword","useEffect","onAuthStateChanged","authUser","console","log","replace","signIn","signInWithEmailAndPassword","catch","error","alert","KeyboardAvoidingView","behavior","container","StatusBar","source","uri","width","height","borderRadius","inputContainer","placeholder","autofocus","type","value","onChangeText","text","secureTextEntry","onSubmitEditing","containerStyle","button","onPress","title","navigate","flex","alignItems","justifyContent","padding","marginTop","TestingImages","Button","color","RegisterScreen","name","setName","imageUrl","setImageUrl","useLayoutEffect","setOptions","headerBackTitle","register","createUserWithEmailAndPassword","then","user","updateProfile","displayName","photoURL","message","chooseImage","ImagePicker","customButtons","storageOptions","skipBackup","path","response","didCancel","customButton","JSON","stringify","setState","filePath","fileData","data","fileUri","h3","marginBottom","raised","backgroundColor","CustomListItem","id","chatName","enterChat","chatMessages","setChatMessages","collection","doc","orderBy","onSnapshot","snapshot","docs","map","key","bottomDivider","rounded","Content","Title","fontWeight","Subtitle","numberOfLines","ellipsizeMode","HomeScreen","chats","setChats","signOutUser","signOut","headerStyle","headerTitleStyle","headerTintColor","headerLeft","marginLeft","TouchableOpacity","activeOpacity","currentUser","headerRight","marginRight","AntDesign","size","SimpleLineIcons","SafeAreaView","ScrollView","AddChatScreen","input","setInput","createChat","a","async","add","goBack","leftIcon","disabled","ChatScreen","route","messages","setMessages","headerBackTitleVisible","headerTitleAlign","headerTitle","params","Ionicons","sendMessage","timestamp","FieldValue","serverTimestamp","unsubscribe","Platform","OS","keyboardVerticalOffset","TouchableWithoutFeedback","Keyboard","dismiss","contentContainerStyle","paddingTop","reciever","position","bottom","right","recieverText","sender","left","senderText","senderName","footer","TextInput","textInput","blurOnSubmit","alignSelf","maxWidth","margin","paddingRight","Stack","createStackNavigator","globalScreenOptions","App","NavigationContainer","Navigator","initialRouteName","screenOptions","Screen","options","component"],"mappings":"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","file":"static/js/app.5bb63c38.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\n\nclass ChatBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <View style={styles.chat}>\n        <Text>this is a ChatBox</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  chat: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    // flex: 0.65,\n    borderColor: \"blue\",\n    borderWidth: 1,\n    fontSize: 400\n  },\n});\n\n\n\nexport default ChatBox;\n\n","\nimport * as firebase from \"firebase\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\n\n\n\n  var firebaseConfig = {\n    apiKey: \"AIzaSyB7t1HpPUolF1HWAs7d-6OmxGQnYPvD5Z8\",\n    authDomain: \"epp-messaging.firebaseapp.com\",\n    projectId: \"epp-messaging\",\n    storageBucket: \"epp-messaging.appspot.com\",\n    messagingSenderId: \"966725075871\",\n    appId: \"1:966725075871:web:d258154f250ec50b5e73aa\",\n    measurementId: \"G-3P2L2B760R\"\n  };\n\n  let app;\n\n  if(firebase.apps.length === 0){\n    app = firebase.initializeApp(firebaseConfig);\n  }else {\n    app = firebase.app()\n  }\n\n// var connectedRef = firebase.database().ref(\".info/connected\");\n// connectedRef.on(\"value\", function (snap) {\n//   if (snap.val() === true) {\n//     alert(\"connected\");\n//   } else {\n//     alert(\"not connected\");\n//   }\n// });\n\n\n  const db = app.firestore()\n  const auth = firebase.auth()\n\n  export {db, auth};","import React, { useEffect, useRef, useState } from \"react\";\nimport { StatusBar } from 'expo-status-bar'\nimport {StyleSheet, Text, View, KeyboardAvoidingView } from 'react-native'\nimport {Button, Input, Image} from \"react-native-elements\"\nimport Icon from \"react-native-vector-icons/FontAwesome\";\nimport {auth} from \"../firebase\"\nimport { NavigationSharp } from \"@material-ui/icons\";\n\n\nconst LoginScreen = ({navigation}) => {\n  // in order to use state you have to import it from react on line 1\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('');\n\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged( (authUser) => {\n      console.log('====================================');\n      console.log(authUser);\n      console.log('====================================');\n      if(authUser){\n      \n        // this will send the page back to home instead of login again , after we create a user and the replace takes the back button off so you cant go back to the loggin screen and use it again while already logged in \n          navigation.replace(\"Home\")\n      }\n    })\n      // this is saying if a user is found anywhere log them in , so it saves you esentially and lets it so that you dont have to log in everytime\n      \n    return unsubscribe;\n  }, [] )\n\n  const signIn = () => {\n    auth.signInWithEmailAndPassword(email, password).catch(error => alert(error))\n\n  }\n\n\n  return (\n    // this is so when you open the keyboard it moves everything up and the default value is going to be true so you dont have to put enabled \n    <KeyboardAvoidingView behavior='padding' style={styles.container}>\n      <StatusBar style=\"auto\" />\n      {/* image sources take two parameters the source uri and the style so you have to do the image size everytime you import an image so far  */}\n      <Image\n        source={{\n          uri:\n            \"https://techcrunch.com/wp-content/uploads/2018/12/getty-messaging.jpg\",\n        }}\n        style={{\n          width: 200,\n          height: 200,\n          borderRadius: 20,\n        }}\n      />\n      <View style={styles.inputContainer}>\n        {/* just use text instead of event how we usually use event on regular react it will pull it from text  */}\n        <Input\n          placeholder=\"Email\"\n          autofocus\n          type=\"email\"\n          value={email}\n          onChangeText={(text) => setEmail(text)}\n        />\n        <Input\n          placeholder=\"Password\"\n          secureTextEntry\n          type=\"password\"\n          value={password}\n          onChangeText={(text) => setPassword(text)}\n          onSubmitEditing={signIn}\n        />\n      </View>\n      {/* auto flex and by defualt it is in a column not a row, you wrap buttons with container style instead of just style because its a react native thing. not sure why   */}\n      {/* everything is onPress not on click now */}\n      <Button containerStyle={styles.button} onPress={signIn} title=\"Login\" />\n      {/* outline gives it a clear background and just outlines it in the stock color that it was already*/}\n      {/* onPress with navigation.navigate will allow it to go back and forth and then since they are all in the same stack you can swipe back and forth instead of pressing the buttons  */}\n      <Button onPress={() => navigation.navigate('Register') } containerStyle={styles.button}  type=\"outline\" title=\"Register\" />\n      {/* this is a common fix for things still being over lapped by the keyboard avoid so you put an empty view with the height and it will push everything up  */}\n      <View  style={{ height: 100}}/>\n    </KeyboardAvoidingView>\n  );\n}\n\nexport default LoginScreen\n\nconst styles = StyleSheet.create({\n  container:{ \n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 10, \n\n  },\n  inputContainer: {\n    width: 300,\n\n  },\n  button: {\n    width: 200,\n    marginTop: 10,\n  }\n\n})\n","import React from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\nimport { Button } from 'react-native-paper'\n\nconst TestingImages = () => {\n    return (\n        <View>\n            <Button  title=\"testing\" style={styles.button} /> \n            <Text>testing this page out </Text>\n        </View>\n    )\n}\n\nexport default TestingImages\n\nconst styles = StyleSheet.create({\n  button: {\n    width: 200,\n    marginTop: 10,\n    color: \"red\",\n  },\n});\n","import React, { useLayoutEffect, useState } from \"react\";\nimport { StatusBar } from \"expo-status-bar\";\nimport * as ImagePicker from \"react-native-image-picker\";\nimport { StyleSheet, View, KeyboardAvoidingView } from \"react-native\";\nimport { Button, Input, Image, Text } from \"react-native-elements\";\nimport Icon from \"react-native-vector-icons/FontAwesome\";\nimport {auth} from \"../firebase\"\nimport TestingImages from \"./TestingImages\";\n\nconst options = {\n  title: \"Select Avatar\",\n  customButtons: [{ name: \"fb\", title: \"Choose Photo from Facebook\" }],\n  storageOptions: {\n    skipBackup: true,\n    path: \"images\",\n  },\n};\n\nconst RegisterScreen = ({navigation}) => {\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [imageUrl, setImageUrl] = useState(\"\");\n\n      \n\n    // just before it scrolls to the other screen do this \n    useLayoutEffect(() => {\n        // this makes it so the top left back button is what you want to name it instead of being what it was already named before which in this case it would be login\n        navigation.setOptions({\n            headerBackTitle: \"Back to Login\"\n        })\n    }, [navigation])\n\n    const register = () => {\n        auth.createUserWithEmailAndPassword(email,password)\n        .then(authUser => {\n            authUser.user.updateProfile({\n                displayName: name,\n                photoURL: \n                    imageUrl || \n                    \"https://i.pinimg.com/originals/51/f6/fb/51f6fb256629fc755b8870c801092942.png\"\n            })\n        })\n        .catch((error) => alert(error.message))\n    }\n\n\n  chooseImage = () => {\n    let options = {\n      title: \"Select Image\",\n      customButtons: [\n        { name: \"customOptionKey\", title: \"Choose Photo from Custom Option\" },\n      ],\n      storageOptions: {\n        skipBackup: true,\n        path: \"images\",\n      },\n    };\n    ImagePicker.showImagePicker(options, (response) => {\n      console.log(\"Response = \", response);\n\n      if (response.didCancel) {\n        console.log(\"User cancelled image picker\");\n      } else if (response.error) {\n        console.log(\"ImagePicker Error: \", response.error);\n      } else if (response.customButton) {\n        console.log(\"User tapped custom button: \", response.customButton);\n        alert(response.customButton);\n      } else {\n        const source = { uri: response.uri };\n\n        // You can also display the image using data:\n        // const source = { uri: 'data:image/jpeg;base64,' + response.data };\n        // alert(JSON.stringify(response));s\n        console.log(\"response\", JSON.stringify(response));\n        this.setState({\n          filePath: response,\n          fileData: response.data,\n          fileUri: response.uri,\n        });\n      }\n    });\n  };\n\n\n    return (\n      <KeyboardAvoidingView behavior=\"padding\" style={styles.container}>\n        <StatusBar style=\"auto\" />\n        {/* using react native elements to pass through text instead of react-native you can use the h3 style and actually make it bigger just with moving it to react-native-elements */}\n        <Text h3 style={{ marginBottom: 50 }}>\n          Create A Epp Account\n        </Text>\n\n        <View style={styles.inputContainer}>\n          <Input\n            placeholder=\"Full Name\"\n            autofocus\n            type=\"text\"\n            value={name}\n            onChangeText={(text) => setName(text)}\n          />\n          <Input\n            placeholder=\"Email\"\n            type=\"email\"\n            value={email}\n            onChangeText={(text) => setEmail(text)}\n          />\n          <Input\n            placeholder=\"Password\"\n            secureTextEntry\n            type=\"password\"\n            value={password}\n            onChangeText={(text) => setPassword(text)}\n          />\n          <Input\n            placeholder=\"Profile picture Url(optional)\"\n            type=\"text\"\n            value={imageUrl}\n            onChangeText={(text) => setImageUrl(text)}\n            // this is so that when we click enter it will auto go to register so that you dont have to click it also but thats only if you do it on this placeholder\n            onSubmitEditing={register}\n          />\n        </View>\n        {/* again with the on press and then raised will give it a slightly better look  */}\n        <Button\n          style={styles.button}\n          raised\n          onPress={register}\n          title=\"Register Now\"\n        />\n\n        <Button onPress={chooseImage} style={styles.button} />\n\n        <TestingImages />\n        <View style={{ height: 100 }} />\n      </KeyboardAvoidingView>\n    );\n}\n\nexport default RegisterScreen\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1, \n        alignItems: \"center\",\n        justifyContent: \"center\",\n        padding: 10, \n        backgroundColor: 'white',\n    },\n    button: {\n        width: 200,\n        marginTop: 10,\n        color: 'red',\n    },\n    inputContainer: {\n        width: 300,\n    }\n})\n","import React, { useEffect, useState } from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\nimport {ListItem, Avatar } from \"react-native-elements\"\nimport { auth, db } from \"../firebase\"\n\n\nconst CustomListItem = ({id, chatName, enterChat}) => {\n  const [chatMessages, setChatMessages] = useState([])\n\n\n  useEffect(() => {\n    const unsubscribe = db.collection('chats').doc(id).collection('messages').orderBy('timestamp', 'desc').onSnapshot(snapshot => \n      setChatMessages(snapshot.docs.map(doc => doc.data()))\n    )\n    return unsubscribe\n  })\n\n    return (\n        // this is the same as a li for the most part so far that i can understand \n      <ListItem key={id} onPress={() => enterChat(id, chatName)} key={id} bottomDivider >\n          {/* another picture that dipslays as already a circle and thats waht rounded does  */}\n        <Avatar\n          rounded\n          source={{\n            uri: chatMessages?.[0]?.photoURL ||\n              \"https://i.pinimg.com/originals/51/f6/fb/51f6fb256629fc755b8870c801092942.png\",\n          }}\n        />\n        <ListItem.Content>\n            <ListItem.Title style={{ fontWeight: '800'}}>\n              {/* passing through the chat name from the homescreen changes the hardcoded value to now the value that we made up  */}\n                {chatName}\n            </ListItem.Title >\n            {/* this will make it so that it has the three dots after the first line of text so that you know you have more to read but it wont go outside of the acutal box , also you put number of lines so that you can either have just 1 or as many as you would like  */}\n            <ListItem.Subtitle \n            numberOfLines={1} \n            ellipsizeMode=\"tail\" >\n                {chatMessages?.[0]?.displayName}   {chatMessages?.[0]?.message}\n            </ListItem.Subtitle>\n\n        </ListItem.Content>\n      </ListItem>\n    );\n}\n\nexport default CustomListItem\n\nconst styles = StyleSheet.create({})\n","import React, { useEffect, useLayoutEffect, useState } from 'react'\nimport { StyleSheet, ScrollView, Text, View, SafeAreaView, TouchableOpacity } from 'react-native'\nimport { Avatar } from 'react-native-elements'\nimport CustomListItem from '../components/CustomListItem'\nimport { auth, db } from \"../firebase\"\nimport {AntDesign, SimpleLineIcons} from \"@expo/vector-icons\"\n\nconst HomeScreen = ({navigation}) => {\n  const [chats, setChats] = useState([]);\n\n\n\n    const signOutUser = () => {\n       auth.signOut().then(() => {\n           navigation.replace('Login')\n       }) \n    }\n\n    useEffect(() => {\n      // we're calling the db that we just made and it is called chats \n        const unsubscribe = db.collection('chats').onSnapshot(snapshot => \n          setChats(snapshot.docs.map(doc => ({\n            // id is the id of the actual chate and the data is the name of the chat that goes with the id , you have to use () after doc.data\n            id: doc.id,\n            data: doc.data(),\n          }))\n          )\n        )\n        // if you dont do this it will make a memory leak and keep calling and make it lack performance\n        return unsubscribe\n    }, [])\n\n    useLayoutEffect(() => {\n        // setting all of the homescreen settings different from the rest \n        navigation.setOptions({\n          title: \"Pen Pals\",\n            headerStyle: { backgroundColor: \"white\" },\n          headerTitleStyle: { color: \"blue\" },\n          //   for the icons to be black\n          headerTintColor: \"black\",\n          // () instead of {} for a direct return to see it on the page without having to call it \n          headerLeft: () => (\n            <View style={{ marginLeft: 20 }}>\n              {/* makes the picture or whatever it is wrapping touchable  */}\n              <TouchableOpacity onPress={signOutUser} activeOpacity={0.5}>\n                {/* all of these names like photoURL are coming straight from firebase */}\n                <Avatar rounded source={{ uri: auth?.currentUser?.photoURL }} />\n              </TouchableOpacity>\n            </View>\n          ),\n          headerRight: () => (\n            <View\n              style={{\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n                width: 80,\n                marginRight: 20,\n              }}\n            >\n              <TouchableOpacity activeOpacity={0.5}>\n                <AntDesign name=\"camerao\" size={24} color=\"black\" />\n              </TouchableOpacity>\n              <TouchableOpacity onPress={() => navigation.navigate(\"AddChat\") } activeOpacity={0.5}>\n                <SimpleLineIcons name=\"pencil\" size={24} color=\"black\" />\n              </TouchableOpacity>\n            </View>\n          ),\n        });\n    }, [navigation])\n\n    const enterChat = (id, chatName) => {\n      navigation.navigate('Chat', {\n        // if the value is the same name you dont have to do id:id or chatName:chatName you can just call them chatName\n        id,\n        chatName,\n      })\n    }\n\n    return (\n        <SafeAreaView>\n          {/* setting the height to 100% will make the scroll cleaner and that you cant go in and out not seeing the chat  */}\n            <ScrollView style={styles.container}>\n              {chats.map(({id, data: {chatName}}) => (\n                // everythign that we call such as enterChat={enterChat } is passing through kinda like props but without the need for props \n                <CustomListItem \n                key={id}\n                id={id}\n                chatName={chatName}\n                enterChat={enterChat} />\n              ))}\n            </ScrollView>\n        </SafeAreaView>\n    )\n}\n\nexport default HomeScreen\n\nconst styles = StyleSheet.create({\n  // this style is the scroll view to make it look better when scrollign \n  container: {\n    height: \"100%\",\n  }\n})\n","import React, { useLayoutEffect, useState } from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\nimport { Input, Button } from \"react-native-elements\";\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport { auth, db } from \"../firebase\";\n\nconst AddChatScreen = ({navigation}) => {\n    const [input, setInput] = useState(\"\");\n\n\n    useLayoutEffect(() => {\n        navigation.setOptions({\n            title: \"Add a New Chat\",\n            headerBackTitle: \"Chats\",\n        })\n    }, [navigation])\n\n    const createChat = async () => {\n        await db.collection('chats').add({\n            chatName: input\n        }).then(() => {\n            navigation.goBack()\n        }).catch(error =>alert(error))\n    }\n    console.log('====================================');\n    console.log(input);\n    console.log('====================================');\n\n\n    return (\n        <View style={styles.container}>\n            <Input placeholder=\"Enter A Chat Name\" \n            value={input}\n            onChangeText={text => setInput(text)} \n            onSubmitEditing={createChat}\n            leftIcon={\n                <Icon name=\"edit\" type=\"antdesign\" size={24} color=\"black\" />\n            } \n            />\n            <Button disabled={!input} onPress={createChat} title=\"Create New Chat\" />\n        </View>\n    )\n}\n\nexport default AddChatScreen\n\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: 'white',\n        padding: 30,\n        height: '100%',\n    },\n})\n","import React, { useLayoutEffect, useState } from 'react'\nimport { KeyboardAvoidingView, ScrollView, StyleSheet, Text, TextInputBase, TextInputComponent, TouchableOpacity, View, TextInput, SafeAreaView, Keyboard, TouchableWithoutFeedback } from 'react-native'\nimport  {Avatar} from 'react-native-elements'\nimport {AntDesign, FontAwesome, Ionicons} from \"@expo/vector-icons\"\nimport { StatusBar } from 'expo-status-bar'\nimport * as firebase from \"firebase\";\nimport {db, auth} from \"../firebase\";\nimport InvertibleScrollView from \"react-native-invertible-scroll-view\";\n\n\nconst ChatScreen = ({navigation, route}) => {\n\n    const [input, setInput] = useState('');\n    const [messages, setMessages] = useState([]);\n\n    useLayoutEffect(() => {\n        navigation.setOptions({\n          title: \"Chat\",\n          // this will make it so there is no back button just the back arrow so it makes it look cleaner\n          headerBackTitleVisible: false,\n          headerTitleAlign: \"left\",\n          headerTitle: () => (\n            <View\n              style={{\n                flexDirection: \"row\",\n                alignItems: \"center\",\n              }}\n            >\n              <Avatar\n                rounded\n                source={{\n                  uri: messages[0]?.data.photoURL || \n                    \"https://i.pinimg.com/originals/51/f6/fb/51f6fb256629fc755b8870c801092942.png\",\n                }}\n              />\n              {/* this is how you have to do it if you want to pull it in instead of coming from title */}\n              <Text\n                style={{ color: \"blue\", marginLeft: 10, fontWeight: \"900\" }}\n              >\n                {route.params.chatName}\n              </Text>\n            </View>\n          ),\n          headerLeft: () => (\n            //   since its a touchable opacity and no longer the back button you have to pass in navigation.goBack so that it will go to the previous screen\n            <TouchableOpacity\n              style={{ marginLeft: 10 }}\n              onPress={navigation.goBack}\n            >\n              <AntDesign name=\"banckward\" size={24} color=\"white\" />\n            </TouchableOpacity>\n          ),\n          headerRight: () => (\n            <View\n            style={{\n                flexDirection: 'row',\n                justifyContent: 'space-between',\n                width: 80,\n                marginRight: 20,\n            }}\n            >\n            \n              <TouchableOpacity>\n                <FontAwesome name=\"video-camera\" size={24} color=\"white\" />\n              </TouchableOpacity>\n              <TouchableOpacity>\n                <Ionicons name=\"call\" size={24} color=\"white\" />\n              </TouchableOpacity>\n            </View>\n          ),\n        });\n    }, [navigation, route, messages])\n\n    const sendMessage = () => {\n        // have to import it , and it makes the keyboard disapear as you send messages , not sure if i want to keep it or not yet , may get very annoying \n        //  Keyboard.dismiss(); \n\n         db.collection('chats').doc(route.params.id).collection('messages').add({\n             timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n             message: input,\n             displayName: auth.currentUser.displayName,\n             email: auth.currentUser.email,\n             photoURL: auth.currentUser.photoURL,\n         })\n         setInput('')\n    }\n\n    useLayoutEffect(() => {\n        const unsubscribe = db\n        .collection('chats')\n        .doc(route.params.id)\n        .collection('messages')\n        .orderBy('timestamp', 'desc')\n        .onSnapshot((snapshot) => setMessages(\n            snapshot.docs.map(doc => ({\n                id: doc.id,\n                data: doc.data(),\n            }))\n        ))\n        console.log(messages);\n        return unsubscribe;\n    }, [route])\n\n\n    return (\n      <SafeAreaView style={{ flex: 1, backgroundColor: \"white\" }}>\n        <StatusBar style=\"light\" />\n        {/* have to do keyboardavoidingview to make the keyboard go with it */}\n        <KeyboardAvoidingView\n          behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n          style={styles.container}\n          keyboardVerticalOffset={90}\n        >\n          <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\n            <>\n              <ScrollView contentContainerStyle={{ paddingTop: 15 }} >\n                {/* chat goes here  */}\n                {messages.map(({ id, data }) =>\n                  data.email === auth.currentUser.email ? (\n                    <View key={id} style={styles.reciever}>\n                      <Avatar\n                        position=\"absolute\"\n                        //   helps with web styling apparently\n                        containerStyle={{\n                          position: \"absolute\",\n                          bottom: -15,\n                          right: -5,\n                        }}\n                        bottom={-15}\n                        right={-5}\n                        size={30}\n                        rounded\n                        source={{\n                          uri: data.photoURL,\n                        }}\n                      />\n                      <Text style={styles.recieverText}>{data.message}</Text>\n                    </View>\n                  ) : (\n                    <View key={id} style={styles.sender}> <Avatar\n                        position=\"absolute\"\n                        // helps with webstyling apparently\n                        containerStyle={{\n                          position: \"absolute\",\n                          bottom: -15,\n                          left: -5,\n                        }}\n                        bottom={-15}\n                        left={-5}\n                        size={30}\n                        rounded\n                        source={{\n                          uri: data.photoURL,\n                        }}\n                      />\n                      <Text style={styles.senderText}>{data.message}</Text>\n                      <Text style={styles.senderName}>{data.displayName}</Text>\n                    </View>\n                  )\n                )}\n              </ScrollView>\n              <View style={styles.footer}>\n                <TextInput\n                  value={input}\n                  onChangeText={(text) => setInput(text)}\n                  placeholder=\"Signal Message\"\n                  style={styles.textInput}\n                //   no clue why but this makes the keyboard stay up when you type stuff out \n                  blurOnSubmit={false}\n                  onSubmitEditing={sendMessage}\n                />\n                {/*  */}\n                <TouchableOpacity onPress={sendMessage}>\n                  <Ionicons name=\"send\" size={24} color=\"#2B68E6\" />\n                </TouchableOpacity>\n              </View>\n            </>\n          </TouchableWithoutFeedback>\n        </KeyboardAvoidingView>\n      </SafeAreaView>\n    );\n}\n\nexport default ChatScreen\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  reciever: {\n    padding: 15,\n    backgroundColor: \"#ECECEC\",\n    alignSelf: \"flex-end\",\n    borderRadius: 20,\n    marginRight: 15,\n    marginBottom: 20,\n    maxWidth: \"80%\",\n    position: \"relative\",\n  },\n  sender: {\n    padding: 15,\n    backgroundColor: \"red\",\n    alignSelf: \"flex-start\",\n    borderRadius: 20,\n    margin: 15,\n    maxWidth: \"80%\",\n    position: \"relative\",\n  },\n  senderText: {\n    color: \"white\",\n    fontWeight: \"500\",\n    marginLeft: 10,\n    marginBottom: 15,\n  },\n  recieverText: {\n    color: \"black\",\n    fontWeight: \"500\",\n    marginLeft: 10,\n  },\n  senderName: {\n    left: 10,\n    paddingRight: 10,\n    fontSize: 10,\n    color: \"white\",\n  },\n  footer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    width: \"100%\",\n    padding: 15,\n  },\n  textInput: {\n    //   put it to the bottom and give the text height 40\n    bottom: 0,\n    height: 40,\n    flex: 1,\n    // seperate the arrow and the text area\n    marginRight: 15,\n    // make the tex border transparent and the background grey\n    borderColor: \"transparent\",\n    backgroundColor: \"#ECECEC\",\n    // dont be so cramped\n    padding: 10,\n    // make the text color blue\n    color: \"blue\",\n    borderRadius: 30,\n  },\n});\n","import React from 'react';\nimport \"react-native-gesture-handler\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\n// import { enableScreens } from \"react-native-screens\"; \nimport { StyleSheet, Text, View ,Image , SafeAreaView, Button} from 'react-native';\nimport { Col, Row, Grid } from \"react-native-easy-grid\";\nimport { vw, vh, vmin, vmax } from \"react-native-expo-viewport-units\";\nimport ChatBox from './ChatBox';\nimport LoginScreen from \"./screens/LoginScreen\"\nimport RegisterScreen from \"./screens/RegisterScreen\";\nimport HomeScreen from './screens/HomeScreen';\nimport AddChatScreen from './screens/AddChatScreen';\nimport ChatScreen from './screens/ChatScreen';\n\n\nconst Stack = createStackNavigator()\n\nconst globalScreenOptions = {\n  headerStyle: { backgroundColor: \"#F6C455\" },\n  headerTitleStyle: { color: \"black\" },\n  headerTintColor: \"white\",\n};\n\n\nexport default function App(){\n  return (\n    <NavigationContainer>\n      {/* stacking apps  */}\n      <Stack.Navigator\n        // this will make it be whatever stack you want so that you dont have to keep going back through stacks to change stuff around , this will make it the first page everytime\n        initialRouteName=\"Login\"\n        screenOptions={globalScreenOptions}\n      >\n        <Stack.Screen\n          options={{\n            title: \"EvMessaging\",\n          }}\n          name=\"Login\"\n          component={LoginScreen}\n        />\n        <Stack.Screen\n          options={{\n            title: \"Register Here\",\n          }}\n          name=\"Register\"\n          component={RegisterScreen}\n        />\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"AddChat\" component={AddChatScreen} />\n        <Stack.Screen name=\"Chat\" component={ChatScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    // flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderColor: 'black',\n    borderWidth: 1,\n\n  },\n\n});\n"],"sourceRoot":""}